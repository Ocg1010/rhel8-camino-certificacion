# Configuracion global
git config --global user.user "Olivel Cantoran"
git config --global user.email "ocg101010@gmail.com"
git config --list --global

# Configurando vscode para que sea el editor predeterminado y que espere a cerrar para tomar los cambios
git config --global core.editor "code --wait"

git config --global core.autocrlf input (en linux)
git config --global core.autocrlf true (en windows)

# AGREGAR ALIAS
gir config --global alias.NAME-ALIAS "COMANDO"

##################################################################

# Remover un archivo del stage
git rm --cached ARCHIVO

# Saltar el proceso de poner los archivos en stage
git commit -a 

# Recuperar archivo eliminado (lo restauras del area de preparacion) lo que hace es devolverlo al area local
git restore archivo.txt

# Vuelve atras a la ultima vez que guardaste los cambios (hiciste un commit)
git checkout archivo.txt

# Retroceder en el tiempo a un tiempo anterior
git reset --hard

# Estatus pero recortado
git status -s

# Mostar que cambios hizo el archivo
git show archivo.txt


# Comparar commits el area de preparacion y lo que no esta commiteado
git diffs --staged

# Obtener Identificacion del commit (con los primeros 7 caracteres se puede identificar)
git log 
# Abreviado
git log --oneline
git config --global core.abbrev NUM

# Comparar commits por ids 
git diff 4427b 9ccc3
git diff --name-only 4427b 9ccc3 
git diff --word-diff 4427b 9ccc3 


###########################################################

# Modificar el ultimo commit (solo el nombre)
git commit --amend
 
# Para agregar un archivo modificando el commit
git add nuevo.txt
git status -s
git commit --amend

##### NO RECOMENDADO
# Modificar commits anteriores (en este caso el commit numero 3 de 5)
git rebase -i head~3
git commite --amend
git log --oneline
git rebase --continue
git log --oneline

# Deshacer un commit
git reset --soft IDCOMIT
git log --oneline
(Todo lo que habia en ese commit lo regresa al area de stagin, para hcer cambio o lo que queramos y con ello crear un nuevo commit)
# Otra manera 
git reseat --soft head~1

# MANERA MIXED
git reset --mixed IDCOMMIT

########################################################
RAMAS
# Listar las ramas que tenemos
git branch
# Crear rama 
git branch nueva-rama
# Movernos a otra rama
git checkout modificar-dev
git switch modificar-dev (Recomendada)
# Crear y moverme en un solo comando
git checakout -b rama-nueva
git swtich -c rama-nueva
# Borrar ramas
git granch -d rama-nueva
# Cambiar nombre a la rama
git branch -m rama-nueva nombre-modificado
# Cambiar el nombre de la rama estando en ella 
git branch -m cambiar-nombre

### FUSIONANDO RAMAS
# PARA FUCIONAR DEBES ESTAR EN LA RAMA A LA QUE QUIERES AGREGAR ESA FUCION.
git merge rama-para-fucionar
# VOLVER ATRAS DE ESA FUCION
git reset --hard COMIT-ANTERIOR

# CUANDO SE RESUELVE UN CONFLICTO
git merge --continue

# MOSTRAR TODOS LOS ARCHIVOS QUE TIENE UN COMMIT ESPECIFICO Y DIRECTORIOS (SOLO MUESTRAN NOMBRES CON EL ARGUMENTOS)
git ls-tree -r --name-only COMIT
git ls-tree -r --name-only HEAD

# BORRAR EL ULTIMO COMMIT
git reset --hard HEAD~1

 # GIT REFLOG (RECUPERAR UN COMIT BORRADO) 
 git reset --hard HEAD~1
 git reset hard COMMIT
  git checakout COMMIT + git switch -c nueva_rama
# EN CASO DE NO CONTAR CON EL HASH DEL COMMIT
git reflog



#####################################
GITHUB
#####################################
# DESCARGA SOLO EL ULTIMO COMMIT SIN ESO DESCARGARIA TODO EL HISTORICO 
 git clone REPOSITORY --depth=1 